* Writing
** Nicer font
  #+begin_src emacs-lisp :tangle yes

  (add-hook 'text-mode-hook 'variable-pitch-mode)
  (global-set-key (kbd "<f5>")
                  (lambda () (interactive) (variable-pitch-mode)))
  #+end_src
** Line highlighting
  HL-line mode is really only useful in text mode buffers where lines regularly wrap.
#+begin_src emacs-lisp :tangle yes
  (global-hl-line-mode -1)
  (add-hook 'text-mode-hook 'hl-line-mode)
#+end_src
** Insert file path
  I would like to be able to insert file paths into buffers with completion.

  Kudos: https://www.emacswiki.org/emacs/InsertFileName

  #+begin_src emacs-lisp :tangle yes
  (defun ik/insert-file-name (filename &optional args)
    "Insert name of file FILENAME into buffer after point.

  Prefixed with \\[universal-argument], expand the file name to
  its fully canocalized path.  See `expand-file-name'.

  Prefixed with \\[negative-argument], use relative path to file
  name from current directory, `default-directory'.  See
  `file-relative-name'.

  The default with no prefix is to insert the file name exactly as
  it appears in the minibuffer prompt."
    ;; Based on insert-file in Emacs -- ashawley 20080926
    (interactive "*fInsert file name: \nP")
    (cond ((eq '- args)
           (insert (file-relative-name filename)))
          ((not (null args))
           (insert (expand-file-name filename)))
          (t
           (insert filename))))

  (global-set-key (kbd "C-c i") 'ik/insert-file-name)
  #+end_src
** Insert new comment line
  While writing a comment, insert a new comment line.
 #+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "<C-return>") 'comment-indent-new-line)
 #+end_src
** Exit enclosing delimiter
  Quickly escape enclosing items such as parentheses or quotes.
  Advantages over using the arrow key:
  - can jump out of any part of expression, not just the end
  - more ergonomic, no need to reach for the arrow key with pinky
#+begin_src emacs-lisp :tangle yes results: silent
  (global-set-key (kbd "<C-escape>") 'sp-forward-sexp)
#+end_src

*** TODO Make this work in org-mode
** Code/text block folding
#+begin_src emacs-lisp :tangle yes :results silent
  (add-hook 'prog-mode-hook 'outline-minor-mode)
  (add-hook 'prog-mode-hook 'hs-minor-mode)
  (with-eval-after-load 'outline
    (define-key outline-minor-mode-map (kbd "<C-tab>") 'bicycle-cycle)
    (define-key outline-minor-mode-map (kbd "<backtab>") 'bicycle-cycle-global))
#+end_src

* Markdown
   #+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'markdown
    (setq markdown-hide-markup t))
   #+end_src
* Olivetti
 #+begin_src emacs-lisp :tangle yes
  (add-hook 'text-mode-hook 'olivetti-mode)
  (setq olivetti-body-width 85)
 #+end_src
* Org
  By the time this config gets parsed and loaded we can assume that org is present since we're tangling with org-babel. That's why there is no need for ~with-eval-after-load~.
** org modules
*** org-pomodoro
**** Sounds
     The starting settings reflect the book's recommendations to have everything on by default, even the ticking sounds.
    #+begin_src emacs-lisp :tangle yes
      (with-eval-after-load 'org-pomodoro
        (setq org-pomodoro-plays-sounds t)
        (setq org-pomodoro-ticking-sound-p t))
    #+end_src

    I exposed a simple toggling function to turn all sounds on and off, in case I have to.
#+begin_src emacs-lisp :tangle yes
  (defun ik/toggle-org-pomodoro-sounds ()
      (interactive)
      (setq org-pomodoro-play-sounds (not org-pomodoro-play-sounds))
      (message "Org Pomodoro sounds turned %s"
               (if org-pomodoro-play-sounds "on" "off")))
#+end_src

**** Notifications
     For those situations when I cannot have the volume on for whatever reason, I make org-pomodoro notifications more prominent by sending them through ~libnotify~.
    #+begin_src emacs-lisp :tangle yes
      (with-eval-after-load 'alert
        (add-to-list 'alert-user-configuration '(((:category . "org-pomodoro")) libnotify nil)))
    #+end_src

**** Long breaks and blocks of pomodoros
     I'm still a novice at the Pomodoro technique, so I'm following the recommendation of the book in setting the long break time to 25 minutes.
     I then tweak the time when a block is considered over.
     Here's how this timer works: from the moment I start the first pomodoro of a block, measure 3 pomodoros (90 min) and another 20, instead of the default 30 minutes.
     This reflects the fact that sometimes I take a break after 3 pomodoros instead of 4 and want to be prompted to reset the timer in those cases even after a 20 minute break.
    #+begin_src emacs-lisp :tangle yes :results silent
      (setq org-pomodoro-long-break-length 25)
      (setq org-pomodoro-expiry-time 110)
    #+end_src

**** Control Panel
     The short and long break commands don't quite work, but resetting the pomodoro count does.

    #+begin_src emacs-lisp :tangle yes
      (defun ik/org-pomodoro-reset-count ()
        (interactive)
        (setq org-pomodoro-count 0))

      (defun ik/org-pomodoro-show-count ()
        (interactive)
        (message "%s pomodoro%s completed in this block"
                         org-pomodoro-count
                         (if (eq org-pomodoro-count 1) "" "s")))

      (defun ik/org-pomodoro-start-short-break ()
        (interactive)
        (org-pomodoro-start 'short-break))

      (defun ik/org-pomodoro-start-long-break ()
          (interactive)
          (ik/org-pomodoro-reset-count)
          (org-pomodoro-start 'long-break))

      (spacemacs/declare-prefix "op" "org-pomodoro")
      (spacemacs/declare-prefix "opb" "breaks")
      (spacemacs/set-leader-keys
        "ops" 'ik/toggle-org-pomodoro-sounds
        "opr" 'ik/org-pomodoro-reset-count
        "opc" 'ik/org-pomodoro-show-count
        "opbl" 'ik/org-pomodoro-start-long-break
        "opbs" 'ik/org-pomodoro-start-short-break)
    #+end_src
***** TODO fix short and long break dispatch
**** TODO Measuring effort
     The first step is to configure effort values.
     #+begin_src emacs-lisp :tangle yes
       (setq org-global-properties '(("EFFORT_ALL" . "0 1 2 3 4 5 6 7 8")))
     #+end_src

     I then I need to add pomodoros as allowed duration units.
    Then I should add something to org-duration-format. It's just a complicated variable.
   #+begin_src emacs-lisp :tangle no
     (setq org-duration-units)
     (setq org-duration-format)
   #+end_src
*** org-habits
   #+begin_src emacs-lisp :tangle yes
     (spacemacs/set-leader-keys
       "oh" 'org-habit-toggle-habits)
     (setq org-habit-preceding-days 30)
   #+end_src
**** TODO habits on specific days
     There's a [[https://github.com/oddious/org-habit-plus][package]] out there that acts as an extension to default habits, it would need a little work to integrate.
     Alternatively, you can add a simple reminder instead of a todo and then use a time expression as shown in these answers:
     - https://stackoverflow.com/a/28459330
     - https://emacs.stackexchange.com/a/7865

    You could even stop treating it as a habit and treat it more like the family update, where there's a reminder, but you do it as soon as you can.
    Or you give up on doing it on weekends, I guess.
** Colemak...
  Making org-mode subtree manipulation colemak-friendly.
  #+begin_src emacs-lisp :tangle yes
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "si" 'org-demote-subtree)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "sk" 'org-narrow-to-subtree)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "sK" 'widen)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "sn" 'org-move-subtree-down)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "se" 'org-move-subtree-up)
  #+end_src

  Evil-org bindings for navigating subtrees are trickier to remap for colemak hnei because they conflict with a lot of existing `g` prefixed bindings.
  So instead we add them to the custom prefix for orgmode.
  For now, keep `gh` as the shortcut for org-up-element.

  #+begin_src emacs-lisp :tangle yes
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "on" 'org-forward-element)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "oe" 'org-backward-element)
  #+end_src
** Interleave integration
   Interleave isn't really an org package but it relies heavily on orgmode syntax.
  #+begin_src emacs-lisp :tangle yes
    (spacemacs/set-leader-keys-for-major-mode 'org-mode
      "oi" 'interleave-mode)
    (with-eval-after-load 'interleave
      (setq interleave-org-notes-dir-list '(".")))
  #+end_src
** Inserting links
   I tried this as an alternative to org-cliplink which allowed me to enter the description of the link completely manually. This doesn't get used nearly as much as I thought it would be.

#+begin_src emacs-lisp :tangle yes
  (defun ik/org-cliplink (description)
    "My version of cliplink only prompts for a link description."
    (interactive "s")
    (insert (org-make-link-string (current-kill 0 t) description)))
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "ol" 'ik/org-cliplink)
#+end_src
** Enable auto-completion
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'auto-complete
    (add-to-list 'ac-modes 'org-mode))
#+end_src
** TODO org-file-apps
   I discovered that attached openoffice documents were being opened with emacs, I'd like to change that.
   Below is my first attempt at solving this, which doesn't work yet.
   #+begin_src emacs-lisp :tangle no
     (setq org-file-apps
           (append org-file-apps '(("\\.od[stgfb]\\'" . system))))
   #+end_src
* Gui elements and prompts
** Simpler yes/no prompt:
 #+begin_src emacs-lisp :tangle yes
  (defalias 'yes-or-no-p 'y-or-n-p)
 #+end_src
** Golden ratio
  #+begin_src emacs-lisp :tangle yes
  (golden-ratio-mode 1)
  #+end_src
** Modeline
  Disable major and minor mode indicators by default for a leaner mode-line.
#+begin_src emacs-lisp :tangle yes
  (setq spaceline-major-mode-p nil)
  (setq spaceline-minor-modes-p nil)
#+end_src
* Navigating inside buffer
** Lines
  Make evil-mode up/down operate in screen lines instead of logical lines.
  #+begin_src emacs-lisp :tangle yes
  (define-key evil-motion-state-map "n" 'evil-next-visual-line)
  (define-key evil-motion-state-map "e" 'evil-previous-visual-line)
  #+end_src
  Also in visual mode
  #+begin_src emacs-lisp :tangle yes
  (define-key evil-visual-state-map "n" 'evil-next-visual-line)
  (define-key evil-visual-state-map "e" 'evil-previous-visual-line)
  #+end_src
** Functions
  It is very convenient to navigate to the beginning and end of functions, especially if they are big methods.
  The default emacs bindings for these commands are unwieldy, however, so add spacemacs hydras for them.

  #+begin_src emacs-lisp :tangle yes
  (spacemacs/set-leader-keys
    "ja" 'beginning-of-defun
    "je" 'end-of-defun)
  #+end_src
* Bookmarks
  These settings emulate VSCode's behavior, in case I ever (God forbid) need to switch.
 #+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "<C-f2>") 'bm-toggle)
  (global-set-key (kbd "<f2>") 'bm-next)
  (global-set-key (kbd "<S-f2>") 'bm-previous)
 #+end_src
* Python
 #+begin_src emacs-lisp :tangle yes
  (setq python-formatter 'black)
  (setq python-test-runner 'pytest)
 #+end_src
* Snippets
  I have several snippets that contain other snippets and would like to be able to expand them.

 #+begin_src emacs-lisp :tangle yes :results silent
  (setq yas-triggers-in-field t)
 #+end_src

* Yaml
  Yaml folding, kudos: https://github.com/jgmize/dotfiles/blob/master/.spacemacs#L501
 #+begin_src emacs-lisp :tangle yes
  (add-hook 'yaml-mode-hook
            (lambda ()
              (outline-minor-mode)
              (define-key yaml-mode-map (kbd "TAB") 'outline-toggle-children)
              (setq outline-regexp "^ *")))
 #+end_src
* helm-bibtex
 #+begin_src emacs-lisp :tangle yes
   (with-eval-after-load 'helm-bibtex
       (setq bibtex-completion-notes-path "~/Readings/bibliography/notes.org"
             bibtex-completion-bibliography '("~/Readings/bibliography/references.bib")
             bibtex-completion-library-path "~/Readings/bibliography/bibtex-pdfs/")
       (setq bibtex-completion-additional-search-fields '(keywords))
       ;; Optional arguments for latex cite command aren't used by me.
       (setq bibtex-completion-cite-prompt-for-optional-arguments nil)
       ;; Need to redefine bibtex notes template to support interleave.
       (setq bibtex-completion-notes-template-one-file
             (concat
              "* ${author-or-editor} (${year}): ${title}\n"
              " :PROPERTIES:\n"
              " :Custom_ID: ${=key=}\n"
              " :Interleave_PDF: "
              (file-name-as-directory bibtex-completion-library-path)
              "${=key=}.pdf\n"
              " :END:\n"
              "\n"))
       (setq bibtex-completion-format-citation-functions
             '((org-mode . bibtex-completion-format-citation-org-link-to-PDF)
               (latex-mode . bibtex-completion-format-citation-cite)
               (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
               (default . bibtex-completion-format-citation-default)))

       (defun ik/bibtex-completion-insert-latex-citation (keys)
         "Force insertion of LaTeX citation anywhere.
   Have to use a function for this because lambdas don't play nice with
   helm-bibtex-helmify-action"
         (insert (bibtex-completion-format-citation-cite keys)))

       ;; This is needed for my custom command to work with helm.
       ;; See: https://github.com/tmalsburg/helm-bibtex#create-new-actions
       (helm-bibtex-helmify-action
        ik/bibtex-completion-insert-latex-citation
        helm-bibtex-insert-latex-citation)
       (helm-add-action-to-source
        "Explicitly insert LaTeX citation"
        'helm-bibtex-insert-latex-citation
        helm-source-bibtex
        0))
  (spacemacs/set-leader-keys "ob" 'helm-bibtex)
 #+end_src
* LaTeX
  Open compiled LaTeX documents in PDF-Tools.
 #+begin_src emacs-lisp :tangle yes
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
  (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook 'TeX-revert-document-buffer)
 #+end_src
* Typing Exercises
 #+begin_src emacs-lisp :tangle yes
   (defun ik/typing-exercises ()
       "Open webpages I need to practice my typing."
       (interactive)
       (browse-url "https://www.keybr.com/")
       (browse-url "https://www.online-stopwatch.com/timer/10minutes"))
 #+end_src
