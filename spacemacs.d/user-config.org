#+PROPERTY: header-args :tangle yes :exports none :results silent cache: yes
* Writing
** Variable pitch font
In all text modes except yaml.
  #+begin_src emacs-lisp
    (add-hook 'text-mode-hook 'variable-pitch-mode)
  #+end_src

  Some font attributes differ on MacOS vs Linux.
  #+begin_src emacs-lisp
    (set-face-attribute
     'variable-pitch
     nil
     :height (if (eq system-type 'darwin) 180 140)
     :family (if (eq system-type 'darwin) "Linux Biolinum" "Linux Biolinum O"))
  #+end_src

  *Note: if you want to find out the name of the font on your system, run ~(font-family-list)~ and search the output for your font.*
** Inserting stuff
#+begin_src emacs-lisp
  (spacemacs/declare-prefix "oi" "insert")
#+end_src
*** Insert file path
  I would like to be able to insert file paths into buffers with completion.

  Kudos: https://www.emacswiki.org/emacs/InsertFileName

  #+begin_src emacs-lisp
    (defun ik/insert-file-name (filename &optional args)
      "Insert name of file FILENAME into buffer after point.

    Prefixed with \\[universal-argument], expand the file name to
    its fully canocalized path.  See `expand-file-name'.

    Prefixed with \\[negative-argument], use relative path to file
    name from current directory, `default-directory'.  See
    `file-relative-name'.

    The default with no prefix is to insert the file name exactly as
    it appears in the minibuffer prompt."
      ;; Based on insert-file in Emacs -- ashawley 20080926
      (interactive "*fInsert file name: \nP")
      (cond ((eq '- args)
             (insert (file-relative-name filename)))
            ((not (null args))
             (insert (expand-file-name filename)))
            (t
             (insert filename))))

    (spacemacs/set-leader-keys "oif" 'ik/insert-file-name)
  #+end_src
*** Insert value of environment variable

#+begin_src emacs-lisp
  (defun ik/insert-from-env ()
    (interactive)
    (insert (call-interactively 'getenv)))
  (spacemacs/set-leader-keys "oie" 'ik/insert-from-env)
#+end_src
** Insert new comment line
  While writing a comment, insert a new comment line.
 #+begin_src emacs-lisp
  (global-set-key (kbd "<C-return>") 'comment-indent-new-line)
 #+end_src
** Jump out of any surround (parens, brackets quotes)
  Quickly escape enclosing items such as parentheses or quotes.
  Advantages over using the arrow key:
  - can jump out of any part of expression, not just the end
  - more ergonomic, no need to reach for the arrow key with pinky
#+begin_src emacs-lisp
  (global-set-key (kbd "<C-escape>") 'sp-forward-sexp)
#+end_src

** TODO Code/text block folding
switch this to tree-sitter folding

** Olivetti
  #+begin_src emacs-lisp
    (add-hook 'org-mode-hook 'olivetti-mode)
    (add-hook 'markdown-mode-hook 'olivetti-mode)
    (with-eval-after-load 'olivetti (olivetti-set-width 103))
  #+end_src

** Add Commas to Numbers
   Based on this:
   https://www.emacswiki.org/emacs/AddCommasToNumbers
   #+begin_src emacs-lisp
     (defun ik-add-number-grouping ()
           (interactive)
           (let
               ((num (thing-at-point 'word))
                (op ",")
                (bounds (bounds-of-thing-at-point 'word)))

             (delete-region (car bounds) (cdr bounds))
             (while (string-match "\\(.*[0-9]\\)\\([0-9][0-9][0-9].*\\)" num)
               (setq num (concat
                          (match-string 1 num) op
                          (match-string 2 num))))
             (insert (format "%s" num))))
   #+end_src

** Move region into variable
#+begin_src emacs-lisp
  (defun ik/move-region-to-variable (count beg end varname)
    "Replace highlighted region with variable name.
    Move up a line and declare the variable setting it to the region.
    If prefix argument is given that's how many lines up we want the variable declared.
    Cursor stays where the region used to be."
    (interactive "P\nr\nMnew variable name: ")
    (save-excursion
      (kill-region beg end)
      (insert varname)
      (when count (forward-line (- (- count 1))))
      (evil-insert-newline-above)
      (when evil-auto-indent (indent-according-to-mode))
      (insert varname " = ")
      (yank)))
#+end_src
* Evil
** evil-escape-mode
Colemak- and English-friendly evil escape sequence and slower delay for my slow typing :)
#+begin_src emacs-lisp
  (setq evil-escape-key-sequence "hh")
  (setq-default evil-escape-delay 0.2)
#+end_src
* Markdown
   #+begin_src emacs-lisp
  (with-eval-after-load 'markdown
    (setq markdown-hide-markup t))
   #+end_src
* Org
  By the time this config gets parsed and loaded we can assume that org is present since we're tangling with org-babel. That's why there is no need for ~with-eval-after-load~.
** Org Modules
   Load the following modules:
#+begin_src emacs-lisp
  (setq org-modules (quote
                     (org-bbdb
                      org-bibtex
                      org-docview
                      org-gnus
                      org-info
                      org-irc
                      org-mhe
                      org-rmail
                      org-w3m)))
#+end_src

  Then define some module-specific settings.
** Fonts
Code blocks and tables should have default font.

#+begin_src emacs-lisp
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
#+end_src
** Roam
   Enable globally:
   #+begin_src emacs-lisp
     (add-hook 'after-init-hook 'org-roam-mode)
   #+end_src

   See ~init.el~ for roam directory setting. I tried it here but it didn't work.

** Babel
   Extend support to some more languages that I use.
   #+begin_src emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((dot . t)
        (shell . t)))
   #+end_src

** Colemak
  Making org-mode subtree manipulation colemak-friendly.
  #+begin_src emacs-lisp
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "si" 'org-demote-subtree)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "sk" 'org-narrow-to-subtree)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "sK" 'widen)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "sn" 'org-move-subtree-down)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "se" 'org-move-subtree-up)
  #+end_src

  Evil-org bindings for navigating subtrees are trickier to remap for colemak hnei because they conflict with a lot of existing `g` prefixed bindings.
  So instead we add them to the custom prefix for orgmode.
  For now, keep `gh` as the shortcut for org-up-element.

  #+begin_src emacs-lisp
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "on" 'org-forward-element)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "oe" 'org-backward-element)
  #+end_src
** Editing headlines
   When editing headlines, ignore tags and asterisks at beginning/end of lines respectively.
#+begin_src emacs-lisp
    (setq org-special-ctrl-a/e t)
#+end_src
** Logging and notes
#+begin_src emacs-lisp
  (setq org-log-into-drawer t)
#+end_src
** Enable auto-completion
#+begin_src emacs-lisp
  (with-eval-after-load 'auto-complete
    (add-to-list 'ac-modes 'org-mode))
#+end_src
** Code Blocks and Tables
*** Auto-indent code blocks
    Adapted from [[https://emacs.stackexchange.com/a/5853][here]].
    #+begin_src emacs-lisp
      (defun indent-org-src-block-automatically ()
        (interactive)
        (when (and (string-equal major-mode "org-mode")
                   (org-in-src-block-p))
          ;; Yaml auto-formatting is broken so we disable it.
          (unless (equal (car (org-babel-get-src-block-info nil)) "yaml")
            (org-edit-special)
            (indent-region (point-min) (point-max))
            (org-edit-src-exit))))
      ;; this started breaking after I upgraded to emacs 29. It would get invoked in non-org buffers
      (add-hook 'before-save-hook #'indent-org-src-block-automatically)
      (spacemacs/set-leader-keys-for-major-mode 'org-mode "od" 'indent-org-src-block-automatically)
    #+end_src

** Agendas
#+begin_src emacs-lisp
  (with-eval-after-load 'org-super-agenda
    (org-super-agenda-mode 1)
    (setq org-super-agenda-final-group-separator "\n")
    (setq org-agenda-custom-commands
          '(("i" "Inbox"
             tags "LEVEL=2+inbox"
             ((org-agenda-files
               (list (expand-file-name "inbox.org" org-directory)))
              (org-agenda-todo-ignore-with-date nil)
              (org-agenda-todo-list-sublevels nil)
              (org-agenda-dim-blocked-tasks t)
              (org-super-agenda-groups
               '((:auto-parent t)))))
            ("w" "Work Daily"
             ((agenda "" ((org-agenda-files (list (expand-file-name "work.org" org-directory)))))
              (alltodo
               ""
               ((org-agenda-files (list (expand-file-name "work.org" org-directory)))
                (org-super-agenda-groups
                 '(( :discard (:tag "tools"))
                   (:name "Waiting/Blocked"
                          :todo "WAITING"
                          :order 2)
                   (:name "In progress" :tag "wip")
                   (:name "Important" :tag "important")
                   (:name "Urgent" :tag "urgent")
                   (:auto-outline-path t)
                   (:auto-tags t)))))))
            ("p" "Personal Daily"
             ((agenda
               ""
               ((org-agenda-dim-blocked-tasks t)
                (org-super-agenda-groups
                 '((:name "Habits" :habit t :order 2)
                   (:name "Schedule" :scheduled t :deadline t :time-grid t :order 1)))))
              (alltodo
               ""
               ((org-super-agenda-groups
                 '((:discard (:pred blocked-invisible-p))
                   ( :discard (:tag "tools"))
                   (:name "Waiting" :todo "WAITING" :order 50)
                   (:auto-outline-path t)
                   (:auto-tags t)))))))
            ("t" "Improve Tools"
             ((tags-todo
               "tools"
               ((org-agenda-max-todos 3)
                (org-agenda-files
                 (list
                  (expand-file-name "work.org" org-directory)
                  (expand-file-name "gtd.org" org-directory)))))))
            ("d" "Daily"
             ((agenda
               ""
               ((org-agenda-span 2)
                (org-agenda-start-day "-1d")
                (org-agenda-start-with-follow-mode t)
                (org-agenda-follow-indirect t)
                (org-agenda-start-with-log-mode t)
                (org-agenda-files
                 (list (expand-file-name "diary.org" org-directory)))
                (org-super-agenda-groups
                 '((:name "Today" :date today :order 1)))))))))
    (defun blocked-invisible-p (item)
      "Check if item is blocked and invisible."
      (eq (get-text-property 0 'org-todo-blocked item) 'invisible)))
#+end_src

*** Item appearance
     #+begin_src emacs-lisp
       (setq org-agenda-prefix-format
             '((agenda . " %i %?-12t% s")
               (todo . " %i ")
               (tags . " %i ")
               (search . " %i ")))
     #+end_src

** Capture
#+begin_src emacs-lisp
  (add-hook 'org-capture-mode-hook 'evil-insert-state)

  (setq org-capture-templates
        '(("t"
           "Todo [inbox]"
           entry
           (file+headline "inbox.org" "Inbox")
           "* TODO %i%?")
          ("l"
           "Todo with link [inbox]"
           entry
           (file+headline "inbox.org" "Inbox")
           "* TODO [[%c][%^{link description}]]"
           :immediate-finish t)
          ("d" "Diary Entries")
          ("dp"
           "Diary entry for a project"
           entry
           (file+olp+datetree "diary.org")
           "* entered for %a at %T
    :PROPERTIES:
    :linked-id: %L
    :END:
    %i%?")
          ("dd"
           "Plain diary entry"
           entry
           (file+olp+datetree "diary.org")
           "* %^{short description} (entered at %T)\n %i%?")
          ("dl"
           "diary entry with a link"
           entry
           (file+olp+datetree "diary.org")
           "* [[%c][%^{short description}]] entered at %T\n %i%?")
          ("n"
           "A Note"
           entry
           (file+headline "inbox.org" "Notes")
           "* %i%?")

          ("T"
           "Tickler"
           entry
           (file+headline "tickler.org" "Tickler")
           "* %i%? \n %t")

          ("h"
           "Habit"
           entry
           (file+headline "tickler.org" "Tickler")
           "* TODO %? \n SCHEDULED: %t \n :PROPERTIES:\n :STYLE:  habit \n :END:")))
#+end_src


** Refiling
  [[https://stackoverflow.com/a/21335010/4501212][This link]] finally explains the meaning of the variable ~org-refile-use-outline-path~ the way the docs don't.
  Basically, it lets you treat files as refile targets, with the item being refiled added to the file as a top-level heading.
  Disabling completion in steps is needed to play nice with Helm. See [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][this]]  for an explanation.
   #+begin_src emacs-lisp
     (setq org-refile-use-outline-path 'file)
     (setq org-outline-path-complete-in-steps nil)
     (setq org-refile-targets
           '(("~/Documents/org/gtd.org" :maxlevel . 5)
             ("~/Documents/org/someday.org" :maxlevel . 3)
             ("~/Documents/org/tickler.org" :maxlevel . 2)
             ("~/Documents/org/work.org" :maxlevel . 5)))
   #+end_src

** Remove WIP after it's done
   Remove "wip" tag from entries being archived.
#+begin_src emacs-lisp
  (defun ik/remove-wip-tag ()
    (when (org-entry-is-done-p)
      (org-toggle-tag "wip" 'off)))
  (add-hook 'org-after-todo-state-change-hook 'ik/remove-wip-tag)
#+end_src

** Exporting
*** Disable formalities
#+begin_src emacs-lisp
  (setq org-export-with-toc nil)
  (setq org-export-with-date nil)
  ;; I'm not enough of a megalomaniac to attach my name automatically to everything I produce.
  (setq org-export-with-author nil)
#+end_src
*** Broken Links
    #+begin_src emacs-lisp
      (setq org-export-with-broken-links 'mark)
    #+end_src
*** More headlines
#+begin_src emacs-lisp
  (setq org-export-headline-levels 4)
#+end_src

*** Export Backends
    #+begin_src emacs-lisp
      (setq org-export-backends (quote (ascii html icalendar latex md odt)))
    #+end_src

*** LaTeX

**** pdf-process
     #+begin_src emacs-lisp
       (setq org-latex-pdf-process
             '("latexmk -dvi- -pdf %f -output-directory=%o"))
     #+end_src

**** Template for LaTeX exports
     Font and hyperref setup.
 #+begin_src emacs-lisp
     (setq org-latex-packages-alist
           (append org-latex-packages-alist
                   ;; I much prefer the Libertine/Biolinum combo to the default LaTeX font.
                   '(("" "libertine" nil)
                     "\\renewcommand*\\familydefault{\\sfdefault}"
                     ;; I also need the xcolor for the hyperref colors.
                     ("" "xcolor" nil))))
     (setq org-latex-hyperref-template
           "\\hypersetup{\n colorlinks=true,\n citecolor=gray,\n  linkcolor=blue,\n  linktoc=page}\n")

 #+end_src

**** Table captions
     Captions should just be below all floats, even tables.
     #+begin_src emacs-lisp
     (setq org-latex-caption-above nil)
     #+end_src


*** Reveal.js
    #+begin_src emacs-lisp
      (setq org-reveal-root "file:~/code/reveal.js")
    #+end_src
*** OpenOffice
    I only use the ODT exporter to produce documents I want to share with others.
    The ODT format itself isn't as good for that as .docx, which works seamlessly with MSOffice and GDocs.
    This setting allows me to export directly to .docx without having to manually convert the ODT.
    #+begin_src emacs-lisp
      (setq org-odt-preferred-output-format "docx")
    #+end_src

** Links
*** Space before link when inserting
Something about evil cursor management and the way org inserts links swallows the space before the link. This re-adds the space.
#+begin_src emacs-lisp
  (defun ik/org-insert-link-smartly-from-clipboard ()
    (interactive)
    (let* ((link (substring-no-properties (car kill-ring)))
           (desc
            (read-string
             "Enter link description: "
             (when
                 (string-match "datadoghq\.atlassian\.net" link)
               (car (last
                     (split-string "https://datadoghq.atlassian.net/browse/AI-2736" "/")))))))
      (insert " ")
      (insert (org-link-make-string link desc))))
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
    "ol" 'ik/org-insert-link-smartly-from-clipboard)
#+end_src
*** Use IDs for org heading links
#+begin_src emacs-lisp
  (setq org-id-link-to-org-use-id 'create-if-interactive)
#+end_src


* Gui elements and prompts
** Simpler yes/no prompt:
 #+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
 #+end_src
** Golden ratio
  #+begin_src emacs-lisp
  (golden-ratio-mode 1)
  #+end_src
** Modeline
  Disable major and minor mode indicators by default for a leaner mode-line.
#+begin_src emacs-lisp
  (setq spaceline-major-mode-p nil)
  (setq spaceline-minor-modes-p nil)
#+end_src

** Toggle theme between dark/light
   #+begin_src emacs-lisp
     (spacemacs/set-leader-keys
       "oT"
       'spacemacs/cycle-spacemacs-theme)
   #+end_src
** Disable helm-descrbinds
Newer versions of helm come with this package, it clobbers which-key, but doesn't work. So I disable it and get which-key back:
#+begin_src emacs-lisp
  (helm-descbinds-mode 0)
#+end_src
* Navigating inside buffer
** Lines
  Make evil-mode up/down operate in screen lines instead of logical lines.
  #+begin_src emacs-lisp
  (define-key evil-motion-state-map "n" 'evil-next-visual-line)
  (define-key evil-motion-state-map "e" 'evil-previous-visual-line)
  #+end_src
  Also in visual mode
  #+begin_src emacs-lisp
  (define-key evil-visual-state-map "n" 'evil-next-visual-line)
  (define-key evil-visual-state-map "e" 'evil-previous-visual-line)
  #+end_src
** highlight cursor position
   #+begin_src emacs-lisp
     (beacon-mode 1)
     ;; Show the beacon on demand, not just when switching buffers.
     (spacemacs/set-leader-keys "ol" 'beacon-blink)
   #+end_src
** Functions
  It is very convenient to navigate to the beginning and end of functions, especially if they are big methods.
  The default emacs bindings for these commands are unwieldy, however, so add spacemacs hydras for them.

  #+begin_src emacs-lisp
  (spacemacs/set-leader-keys
    "ja" 'beginning-of-defun
    "je" 'end-of-defun)
  #+end_src
** Cursor to last line in screen
   "I" is mapped to bottom of screen (the opposite of "L") in all modes but org-mode by the spacemacs colemak-evil remapping. In org-mode it is inexplicably set to ~evil-org-insert-line~, while "L" is mapped to ~evil-insert-line~.
   This block fixes the problem.
   #+begin_src emacs-lisp
     (with-eval-after-load 'evil-org
       (evil-define-key 'normal evil-org-mode-map "I" 'evil-window-bottom)
       (evil-define-key 'normal evil-org-mode-map "L" 'evil-org-insert-line))
   #+end_src
** Narrow to indentation level
   #+begin_src emacs-lisp
     (defun ik/narrow-to-indent-up ()
       (interactive)
       (apply
        'narrow-to-region
        (butlast (evil-indent-plus-i-indent-up))))
     (spacemacs/set-leader-keys
       "on" 'ik/narrow-to-indent-up)
#+end_src
* Clear buffer

  Living dangerously: erasing buffers without prompting.
  I'm banking on my ability to quickly (literally one keystroke) undo that action.
  I also use it almost exclusively to clear scratch buffers.
#+begin_src emacs-lisp
  (spacemacs/set-leader-keys "oe" 'erase-buffer)
#+end_src

* Workspaces/Buffer Groups
   #+begin_src emacs-lisp
     (spacemacs/set-leader-keys
            "od" 'desktop-clear)
   #+end_src
* Python
 #+begin_src emacs-lisp
  (setq python-formatter 'black)
  (setq python-test-runner 'pytest)
 #+end_src
** Toggle True/False
   #+begin_src emacs-lisp
     (defun ik-python-toggle-bool ()
       (interactive)
       (let ((bool (thing-at-point 'word))
             (bounds (bounds-of-thing-at-point 'word)))
         (delete-region (car bounds) (cdr bounds))
         (insert (format "%s" (if (string= bool "True") "False" "True")))))

     (spacemacs/set-leader-keys-for-major-mode 'python-mode
       "ob" 'ik-python-toggle-bool)
   #+end_src
** Code navigation

   #+begin_src emacs-lisp
     (spacemacs/declare-prefix-for-mode 'python-mode "n" "navigation")
     (spacemacs/set-leader-keys-for-major-mode 'python-mode "nu"
       'python-nav-backward-up-list)
     (spacemacs/declare-prefix-for-mode 'python-mode "nf" "defun")
     (spacemacs/set-leader-keys-for-major-mode 'python-mode
       "nfa" 'python-nav-forward-defun
       "nfe" 'python-nav-backward-defun
       "nfm" 'python-nav-if-name-main)
   #+end_src
** Insert comment to disable lint error for long line
#+begin_src emacs-lisp
  (fset 'disable-python-linter-long-line-check [65 32 35 32 110 111 113 97 58 32 69 53 48 49 escape 110])
#+end_src
** Copy function name
   Would be cool to tweak this to include the module name.
#+begin_src emacs-lisp
  (defun ik-python-copy-function-name ()
    "Copy name of enclosing function to kill ring"
    (interactive)
    (kill-new
     (car (last (split-string (python-info-current-defun) "\\.")))))
  (spacemacs/set-leader-keys-for-major-mode 'python-mode
    "oc" 'ik-python-copy-function-name)
#+end_src

** Pytest
*** TODO add marker to test parameter
    It's still a bit unclear whether this is useful for just one item or for several in a batch.
    For one item it is indeed quite handy, should just make it for that for now.

    Outline, assuming point is somewhere inside the parameter parentheses
    1. Go to closing parens with ~sp-end-of-sexp~, insert comma followed by ~marks=pytest.mark.VAR~. Should be able to interactively select var, would be extra cool to auto-complete registered marks on the fly.
    2. Go to opening parenthesis with (~sp-beginning-of-sexp~ or ~lisp-state-beginning-of-sexp~), add ~pytest.param~
    3. escape and maybe move down one line?

      I don't understand why this stopped working after I changed it a bit.
      #+begin_src emacs-lisp
        (defun ik/pytest-param-with-id ()
          (interactive)
          (let ((inner-paren (evil-select-paren "(" ")" nil nil nil 1 nil))
                (outer-paren (evil-select-paren "(" ")" nil nil nil 1 t)))
            (progn
              (evil-visual-select (car inner-paren) (car (cdr inner-paren)))
              (yas-expand-snippet "pytest.param($0, id=\"$1\")"
                                  (car outer-paren)
                                  (car (cdr outer-paren))))))
      #+end_src

* helm-dash
  Mostly per-mode configurations for [[https://kapeli.com/dash][dash document viewer]].
** general
   #+begin_src emacs-lisp
     (setq helm-dash-enable-debugging nil)
   #+end_src
** Python
   #+begin_src emacs-lisp
     (add-hook 'python-mode-hook
               (lambda ()
                 (setq-local dash-docs-docsets
                             '("Python 3" "click"))))
   #+end_src
** Elm
   #+begin_src emacs-lisp
     (add-hook 'elm-mode-hook
               (lambda ()
                 (setq-local dash-docs-docsets
                             '("Elm"))))
   #+end_src
* Snippets
  I have several snippets that contain other snippets and would like to be able to expand them.

 #+begin_src emacs-lisp
  (setq yas-triggers-in-field t)
 #+end_src

* CSV
#+begin_src emacs-lisp
  (add-hook 'csv-mode-hook (lambda () (call-interactively 'csv-align-fields)))
  (add-hook 'csv-mode-hook
            (lambda ()
              (prog1
                  (display-line-numbers-mode)
                (setq display-line-numbers 'relative))))
#+end_src

* helm-bibtex
 #+begin_src emacs-lisp
   (with-eval-after-load 'helm-bibtex
       (setq bibtex-completion-notes-path "~/Readings/bibliography/notes.org"
             bibtex-completion-bibliography '("~/Readings/bibliography/references.bib")
             bibtex-completion-library-path "~/Readings/bibliography/bibtex-pdfs/")
       (setq bibtex-completion-additional-search-fields '(keywords))
       ;; Optional arguments for latex cite command aren't used by me.
       (setq bibtex-completion-cite-prompt-for-optional-arguments nil)
       ;; Need to redefine bibtex notes template to support interleave.
       (setq bibtex-completion-notes-template-one-file
             (concat
              "* ${author-or-editor} (${year}): ${title}\n"
              " :PROPERTIES:\n"
              " :Custom_ID: ${=key=}\n"
              " :Interleave_PDF: "
              (file-name-as-directory bibtex-completion-library-path)
              "${=key=}.pdf\n"
              " :END:\n"
              "\n"))
       (setq bibtex-completion-format-citation-functions
             '((org-mode . bibtex-completion-format-citation-org-link-to-PDF)
               (latex-mode . bibtex-completion-format-citation-cite)
               (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
               (default . bibtex-completion-format-citation-default)))

       (defun ik/bibtex-completion-insert-latex-citation (keys)
         "Force insertion of LaTeX citation anywhere.
   Have to use a function for this because lambdas don't play nice with
   helm-bibtex-helmify-action"
         (insert (bibtex-completion-format-citation-cite keys)))

       ;; This is needed for my custom command to work with helm.
       ;; See: https://github.com/tmalsburg/helm-bibtex#create-new-actions
       (helm-bibtex-helmify-action
        ik/bibtex-completion-insert-latex-citation
        helm-bibtex-insert-latex-citation)
       (helm-add-action-to-source
        "Explicitly insert LaTeX citation"
        'helm-bibtex-insert-latex-citation
        helm-source-bibtex
        0))
  (spacemacs/set-leader-keys "ob" 'helm-bibtex)
 #+end_src
* LaTeX
  Open compiled LaTeX documents in PDF-Tools.
 #+begin_src emacs-lisp
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
  (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook 'TeX-revert-document-buffer)
 #+end_src
* Git
** Save current branch name to clipboard

+Borrowed+ Stolen from [[https://emacs.stackexchange.com/a/30496][here]].
#+begin_src emacs-lisp
  (defun ik/magit-copy-current-branch ()
    "Show the current branch in the echo-area and add it to the `kill-ring'."
    (interactive)
    (let ((branch (magit-get-current-branch)))
      (if branch
          (progn (kill-new branch)
                 (message "%s" branch))
        (user-error "There is no current branch"))))
#+end_src
** Link to commit hash instead of branch name
#+begin_src emacs-lisp
  (with-eval-after-load 'git-link
    (setq git-link-use-commit t))
#+end_src
** Enter insert mode for commits
#+begin_src emacs-lisp
  (add-hook 'git-commit-mode-hook 'evil-insert-state)
#+end_src
